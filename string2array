#!/bin/bash
# MADE by twix https://github.com/Twix53791
# https://github.com/Twix53791/string2array
#==========================================
# Parse string by spaces and by any substring/character separator
# USAGE
# string2array <option> "string"
# ex: toto="1 \"2 5\" 7 toto"; string2array -s "\"" $toto
# ex: string2array -s "\[section\]" "1 2 [section]5 6 7 [section]"
#
# The script returns the array elements parsed, line by line
# To use it to set an array inside a bash script:
#     while read line; do
#        myarray+=("$line")
#     done < <(string2array -s "\"" $string)
#
# CONFIG
# Default separator character
sep="'"
#===========================================

# Help message
_help () {
cat <<EOF
Bash utility string to array quote parsing

USAGE:
   string2array <option> <string>
options:
   -s             set the separator character(s)
   --any-sep      cut y any separator, even it is not preceded by a space
   --only-sep     ignore spaces, cut only by separator
EOF
exit
}

[[ $1 == "-h" || $1 == "--help" ]] && _help

# Options

for arg in "$@"; do
   case $arg in
      -s) sep="$2"; shift 2;;
      --only-sep) onlysep=1; shift;;
      --any-sep) anysep=1; shift;;
   esac
done

string="$@"

if [[ -z $string && -p /dev/stdin ]]; then
   while IFS= read line; do
      string+="$line"
   done
elif [[ -z $string ]]; then
   echo "string2array ERRPR :: No string given. Exit"
   exit
fi
# Bash parsing if missing separators
_bash_parsing () {
   parsing=($1)
   output+=("${parsing[@]}")
   _output "${output[@]}"
}

# Output
_output () {
   for el in "$@";do
      echo "$el"
   done
   exit
}

# Parse string
[[ $string != *"$sep"* ]] && _bash_parsing "$string"
betweensep=0

until [[ -z $string ]]; do
   if [[ $onlysep == 1 ]]; then
      parse="${string%%$sep*}"
      string="${string/$parse$sep/}"
      [[ ${parse:0:1} == " " ]] && parse="${parse:1}"

   elif [[ $anysep == 1 ]]; then
      parse_spc="${string%% *}"
      parse_sep="${string%%$sep*}"

      if [[ ${#parse_spc} -lt ${#parse_sep} ]]; then
         parse="$parse_spc"
         string="${string/$parse /}"
      else
         parse="$parse_sep"
         string="${string/$parse$sep/}"
      fi

   else
      [[ ${string:0:1} == "$sep" ]] && betweensep=1

      if [[ $betweensep == 1 ]]; then
         parse="${string%$sep *}"
         if [[ $parse == $string ]]; then
            [[ ${parse: -1} == "$sep" ]] && parse="${parse:0:-1}"
            string=""
         fi
         parse="${parse:1}"
         string="${string/$sep$parse$sep/}"
         betweensep=0
      else
         parse="${string%% *}"
         string="${string/$parse /}"
         [[ $parse == $string ]] && string=""
      fi
   fi

   # Add to output list
   [[ -n $parse ]] && output+=("$parse")

   # In case string does not contains sep anymore, speed the process
   onlyspaces="${string// /}"
   [[ -z $onlyspaces ]] && string=""

   if [[ -n $string && $string != *$sep* && $onlysep != 1 ]]; then
      _bash_parsing "$string"
   elif [[ -n $string && $string != *$sep* ]]; then
      [[ ${string:0:1} == " " ]] && string="${string:1}"
      output+=("$string")
      string=""
   fi
done

_output "${output[@]}"
